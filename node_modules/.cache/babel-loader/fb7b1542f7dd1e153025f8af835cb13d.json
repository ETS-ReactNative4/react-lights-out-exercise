{"ast":null,"code":"import _slicedToArray from \"/Users/traceytrepper/Desktop/SpringBoard/react-lights-out/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board(_ref) {\n  var nrows = _ref.nrows,\n      ncols = _ref.ncols,\n      chanceLightStartsOn = _ref.chanceLightStartsOn;\n\n  var _useState = useState(createBoard()),\n      _useState2 = _slicedToArray(_useState, 2),\n      board = _useState2[0],\n      setBoard = _useState2[1];\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  function createBoard() {\n    var initialBoard = []; // TODO: create array-of-arrays of true/false values\n\n    return initialBoard;\n  }\n\n  function hasWon() {// TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(function (oldBoard) {\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      var flipCell = function flipCell(y, x, boardCopy) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n      // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n  // TODO\n  // make table board\n  // TODO\n\n}\n\nexport default Board;","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","createBoard","board","setBoard","initialBoard","hasWon","flipCellsAround","coord","oldBoard","split","map","Number","y","x","flipCell","boardCopy"],"sources":["/Users/traceytrepper/Desktop/SpringBoard/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,OAAsD;EAAA,IAArCC,KAAqC,QAArCA,KAAqC;EAAA,IAA9BC,KAA8B,QAA9BA,KAA8B;EAAA,IAAvBC,mBAAuB,QAAvBA,mBAAuB;;EAAA,gBAC1BL,QAAQ,CAACM,WAAW,EAAZ,CADkB;EAAA;EAAA,IAC7CC,KAD6C;EAAA,IACtCC,QADsC;EAGpD;;;EACA,SAASF,WAAT,GAAuB;IACrB,IAAIG,YAAY,GAAG,EAAnB,CADqB,CAErB;;IACA,OAAOA,YAAP;EACD;;EAED,SAASC,MAAT,GAAkB,CAChB;EACD;;EAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;IAC9BJ,QAAQ,CAAC,UAAAK,QAAQ,EAAI;MAAA,uBACJD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CADI;MAAA;MAAA,IACZC,CADY;MAAA,IACTC,CADS;;MAGnB,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACF,CAAD,EAAIC,CAAJ,EAAOE,SAAP,EAAqB;QACpC;QAEA,IAAIF,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGd,KAAd,IAAuBa,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGd,KAAzC,EAAgD;UAC9CiB,SAAS,CAACH,CAAD,CAAT,CAAaC,CAAb,IAAkB,CAACE,SAAS,CAACH,CAAD,CAAT,CAAaC,CAAb,CAAnB;QACD;MACF,CAND,CAHmB,CAWnB;MAEA;MAEA;;IACD,CAhBO,CAAR;EAiBD,CAhCmD,CAkCpD;EAEA;EAEA;EAEA;;AACD;;AAED,eAAehB,KAAf"},"metadata":{},"sourceType":"module"}