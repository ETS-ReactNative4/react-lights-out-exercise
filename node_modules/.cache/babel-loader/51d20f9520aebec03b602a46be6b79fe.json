{"ast":null,"code":"import _toConsumableArray from \"/Users/traceytrepper/Desktop/SpringBoard/react-lights-out/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/traceytrepper/Desktop/SpringBoard/react-lights-out/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/traceytrepper/Desktop/SpringBoard/react-lights-out/src/Board.js\";\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board(_ref) {\n  var _this = this;\n\n  var nrows = _ref.nrows,\n      ncols = _ref.ncols,\n      chanceLightStartsOn = _ref.chanceLightStartsOn;\n\n  var _useState = useState(createBoard()),\n      _useState2 = _slicedToArray(_useState, 2),\n      board = _useState2[0],\n      setBoard = _useState2[1];\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  function createBoard() {\n    var initialBoard = [];\n\n    for (var y = 0; y < nrows; y++) {\n      var row = [];\n\n      for (var x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n\n      initialBoard.push(row);\n    } // TODO: create array-of-arrays of true/false values\n\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(function (row) {\n      return row.every(function (cell) {\n        return !cell;\n      });\n    });\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(function (oldBoard) {\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      var flipCell = function flipCell(y, x, boardCopy) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      }; // TODO: Make a (deep) copy of the oldBoard\n\n\n      var boardCopy = oldBoard.map(function (row) {\n        return _toConsumableArray(row);\n      });\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      return boardCopy; // TODO: in the copy, flip this cell and the cells around it\n      // TODO: return the copy\n    });\n  } // if the game is won, just show a winning msg & render nothing else\n\n\n  if (hasWon()) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 12\n      }\n    }, \"You Win!\");\n  } // TODO\n  // make table board\n\n\n  var tblBoard = [];\n\n  for (var y = 0; y < nrows; y++) {\n    var row = [];\n\n    var _loop = function _loop(x) {\n      var coord = \"\".concat(y, \"-\").concat(x);\n      row.push( /*#__PURE__*/React.createElement(Cell, {\n        key: coord,\n        isLit: board[y][x],\n        flipCellsAroundMe: function flipCellsAroundMe() {\n          return flipCellsAround(coord);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    for (var x = 0; x < ncols; x++) {\n      _loop(x);\n    }\n\n    tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n      key: y,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, row));\n  }\n\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, tblBoard)); // TODO\n}\n\nexport default Board;","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","createBoard","board","setBoard","initialBoard","y","row","x","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","tblBoard"],"sources":["/Users/traceytrepper/Desktop/SpringBoard/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every((row) => row.every((cell) => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const boardCopy = oldBoard.map((row) => [...row]);\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You Win!</div>;\n  }\n\n  // TODO\n\n  // make table board\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n  return (\n    <table className=\"Board\">\n      <tbody>{tblBoard}</tbody>\n    </table>\n  );\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,OAAsD;EAAA;;EAAA,IAArCC,KAAqC,QAArCA,KAAqC;EAAA,IAA9BC,KAA8B,QAA9BA,KAA8B;EAAA,IAAvBC,mBAAuB,QAAvBA,mBAAuB;;EAAA,gBAC1BL,QAAQ,CAACM,WAAW,EAAZ,CADkB;EAAA;EAAA,IAC7CC,KAD6C;EAAA,IACtCC,QADsC;EAGpD;;;EACA,SAASF,WAAT,GAAuB;IACrB,IAAIG,YAAY,GAAG,EAAnB;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2BO,CAAC,EAA5B,EAAgC;MAC9B,IAAIC,GAAG,GAAG,EAAV;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAApB,EAA2BQ,CAAC,EAA5B,EAAgC;QAC9BD,GAAG,CAACE,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgBV,mBAAzB;MACD;;MACDI,YAAY,CAACI,IAAb,CAAkBF,GAAlB;IACD,CARoB,CASrB;;;IACA,OAAOF,YAAP;EACD;;EAED,SAASO,MAAT,GAAkB;IAChB;IACA,OAAOT,KAAK,CAACU,KAAN,CAAY,UAACN,GAAD;MAAA,OAASA,GAAG,CAACM,KAAJ,CAAU,UAACC,IAAD;QAAA,OAAU,CAACA,IAAX;MAAA,CAAV,CAAT;IAAA,CAAZ,CAAP;EACD;;EAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;IAC9BZ,QAAQ,CAAC,UAACa,QAAD,EAAc;MAAA,uBACND,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CADM;MAAA;MAAA,IACdd,CADc;MAAA,IACXE,CADW;;MAGrB,IAAMa,QAAQ,GAAG,SAAXA,QAAW,CAACf,CAAD,EAAIE,CAAJ,EAAOc,SAAP,EAAqB;QACpC;QAEA,IAAId,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGR,KAAd,IAAuBM,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGP,KAAzC,EAAgD;UAC9CuB,SAAS,CAAChB,CAAD,CAAT,CAAaE,CAAb,IAAkB,CAACc,SAAS,CAAChB,CAAD,CAAT,CAAaE,CAAb,CAAnB;QACD;MACF,CAND,CAHqB,CAWrB;;;MACA,IAAMc,SAAS,GAAGL,QAAQ,CAACE,GAAT,CAAa,UAACZ,GAAD;QAAA,0BAAaA,GAAb;MAAA,CAAb,CAAlB;MAEAc,QAAQ,CAACf,CAAD,EAAIE,CAAJ,EAAOc,SAAP,CAAR;MACAD,QAAQ,CAACf,CAAD,EAAIE,CAAC,GAAG,CAAR,EAAWc,SAAX,CAAR;MACAD,QAAQ,CAACf,CAAD,EAAIE,CAAC,GAAG,CAAR,EAAWc,SAAX,CAAR;MACAD,QAAQ,CAACf,CAAC,GAAG,CAAL,EAAQE,CAAR,EAAWc,SAAX,CAAR;MACAD,QAAQ,CAACf,CAAC,GAAG,CAAL,EAAQE,CAAR,EAAWc,SAAX,CAAR;MAEA,OAAOA,SAAP,CApBqB,CAsBrB;MAEA;IACD,CAzBO,CAAR;EA0BD,CAjDmD,CAmDpD;;;EACA,IAAIV,MAAM,EAAV,EAAc;IACZ,oBAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,cAAP;EACD,CAtDmD,CAwDpD;EAEA;;;EACA,IAAIW,QAAQ,GAAG,EAAf;;EAEA,KAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAApB,EAA2BO,CAAC,EAA5B,EAAgC;IAC9B,IAAIC,GAAG,GAAG,EAAV;;IAD8B,2BAErBC,CAFqB;MAG5B,IAAIQ,KAAK,aAAMV,CAAN,cAAWE,CAAX,CAAT;MACAD,GAAG,CAACE,IAAJ,eACE,oBAAC,IAAD;QACE,GAAG,EAAEO,KADP;QAEE,KAAK,EAAEb,KAAK,CAACG,CAAD,CAAL,CAASE,CAAT,CAFT;QAGE,iBAAiB,EAAE;UAAA,OAAMO,eAAe,CAACC,KAAD,CAArB;QAAA,CAHrB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IAJ4B;;IAE9B,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAApB,EAA2BQ,CAAC,EAA5B,EAAgC;MAAA,MAAvBA,CAAuB;IAS/B;;IACDe,QAAQ,CAACd,IAAT,eAAc;MAAI,GAAG,EAAEH,CAAT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAaC,GAAb,CAAd;EACD;;EACD,oBACE;IAAO,SAAS,EAAC,OAAjB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAQgB,QAAR,CADF,CADF,CA3EoD,CAgFpD;AACD;;AAED,eAAezB,KAAf"},"metadata":{},"sourceType":"module"}